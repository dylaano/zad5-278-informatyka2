#include <iostream>
#include <fstream>
#include<string>
#include<iomanip>
#include<queue>
using namespace std;
int const N=20;
struct pole
{
 int w, k;
};
void test()
{
    ifstream f("code.txt", ios::in);
string line;
if(f.is_open())
{
    getline (f,line);
    while(f)
    {
        cout<<line<<endl;
        getline(f,line);
    }
    f.close();
}
}

void wczytaj(int L[][N])
{
    string w;
    ifstream plik("code.txt");
    if(plik.good()){
    plik.open("code.txt");
    for(int i=0;i<N;i++)
    {
      plik>>w;
        for(int j;j<N;j++ )
        {
            if(w[j]=='x')L[i][j]=-1;
        else L[i][j]=0;
        }
    }
    plik.close();
    }
    else cout<<"the file ain't no good :<";
}
void wypisz(int Lab[][N])
{
    cout<<"  ";
    for(int j=0;j<N;j++)
    cout<<setw(3)<<j;
    cout<<endl;
    for(int i=0;i<N;i++)
    {
        cout<<setw(3)<<i;
        for(int j=0;j<N;j++)
        if(Lab[i][j]==-1)cout<<"  X";
        else if (Lab[i][j]==-2)cout<<"  D";
        else cout<<"   ";
        cout<<endl;
    }
}
void oznacz(int L[][N],int w,int k)
{
    int x=L[w][k];
    L[w][k]=-2;
    while(x>1)
    {
        x--;
        if(w>0 && L[w-1][k]==x)w--;
        else if(w<N-1 && L[w+1][k]==x)w++;
        else if(k>0 && L[w][k-1]==x)k--;
        else k++;
        L[w][k]=-2;
    }
}
bool droga(int Lab[][N], pole p1, pole &p2)
{
    int w,k;
    bool wyjscie=false;
    queue<pole> Q;
    Q.push(p1);
    Lab[p1.w][p1.k]=1;
    while(!wyjscie && !Q.empty())
    {
        p2=Q.front(); Q.pop(); w=p2.w; k=p2.k;
        if(w==0 || w==N-1 || k==0 ||k==N-1)
            wyjscie=true;
        else{
            if(Lab[w-1][k]==0)
            {
                Lab[w-1][k]=Lab[w][k]+1;
                p2.w=w-1;p2.k=k;Q.push(p2);
            }
            if (Lab[w][k-1]==0)
            {
                Lab[w][k-1]=Lab[w][k]+1;
                p2.w=w;p2.k=k-1;
                Q.push(p2);
            }
             if (Lab[w][k+1]==0)
            {
                Lab[w][k+1]=Lab[w][k]+1;
                p2.w=w;p2.k=k+1;
                Q.push(p2);
            }

        }
    }
    return wyjscie;
}
void zapisz(int L[][N])
{
    ofstream wynik;
    wynik.open("wynik.txt");
    if(wynik.good())
    {
        for (int i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
            {
                if(L[i][j]==-1)
                    wynik<<"X;";
                else if (L[i][j]==-2)
                    wynik<<"D;";
                else wynik<<"W;";
            }
            wynik<<endl;

    }
    wynik.close();
}
else{
    cout<<"can't save it :<";
}
}
int main()
{
    int L[N][N];
pole p1, p2;
wczytaj(L);
wypisz(L);
cout<<"podaj pole startowe: "<<endl;
cout<<"w= ";cin>>p1.w;
cout<<"k= ";cin>>p1.k;
if(droga(L,p1,p2))
{
    oznacz(L,p2.w,p2.k);
    wypisz(L);
    zapisz(L);
}
else cout<<"brak drogi";
    return 0;
}
